/********************************
 This file was created to help show users how to use the app.
 It is in charge of keeping the map of the sounds to the various buttons
 This page was created on 04232018

 This app is a musical manipulation tool. It Allows the user to create a custom
 array of 16 distinct sounds which the can use to make music. This app was created
 by Tony Faller, Annamali Ganesh, Arnav Gupta and George Kent-Scheller as a final Project
 for EC327 at Boston University.
 v 05012019.3
 *********************************/
//Import statements
package com.example.curiousmusicalmonkeys;

import android.content.Intent;
import android.os.Build;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.media.*;
import android.media.SoundPool;
import android.widget.ImageButton;

//Main inp
public class MainActivity extends AppCompatActivity {
    //Variables

    private ImageButton b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15;// these create all 16 buttons for the screen.
    private SoundPool lib;// this creates the libray of sound objects we will be using.
    private int NumStreams = 1;// this limits the number of sounds that may be played concurently.
    private int temp, bs0, bs1, bs2, bs3, bs4, bs5, bs6, bs7, bs8, bs9, bs10, bs11, bs12, bs13, bs14, bs15;//This holds the id's for the sound libray implementation;
    // this loads in default id's for the various sound objects.
    private int r0 = R.raw.mc, r1 = R.raw.d, r2 = R.raw.e, r3 = R.raw.f, r4 = R.raw.g, r5 = R.raw.a, r6 = R.raw.b, r7 = R.raw.hc, r8 = R.raw.drumroll, r9 = R.raw.badumtss, r10 = R.raw.bounce, r11 = R.raw.loser, r12 = R.raw.meow, r13 = R.raw.pun, r14 = R.raw.scifi, r15 = R.raw.suspence;

    //Functions
    //On Create loads each time the activity_Main is loaded
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        //generated by AS
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //Button Assignment
        b0 = findViewById(R.id.button0);
        b1 = findViewById(R.id.button1);
        b2 = findViewById(R.id.button2);
        b3 = findViewById(R.id.button3);
        b4 = findViewById(R.id.button4);
        b5 = findViewById(R.id.button5);
        b6 = findViewById(R.id.button6);
        b7 = findViewById(R.id.button7);
        b8 = findViewById(R.id.button8);
        b9 = findViewById(R.id.button9);
        b10 = findViewById(R.id.button10);
        b11 = findViewById(R.id.button11);
        b12 = findViewById(R.id.button12);
        b13 = findViewById(R.id.button13);
        b14 = findViewById(R.id.button14);
        b15 = findViewById(R.id.button15);

        //checks OS version to decide how to initialize sound library.
        if (Build.VERSION.SDK_INT >= 21) {
            lib = new SoundPool.Builder().setMaxStreams(NumStreams).build();// both of these were taken from API
        } else {
            lib = new SoundPool(NumStreams, AudioManager.STREAM_MUSIC, 0);
        }

        // this loads the sound ids with the proper sound key
        bs0 = isItDefalt(0);
        bs1 = isItDefalt(1);
        bs2 = isItDefalt(2);
        bs3 = isItDefalt(3);
        bs4 = isItDefalt(4);
        bs5 = isItDefalt(5);
        bs6 = isItDefalt(6);
        bs7 = isItDefalt(7);
        bs8 = isItDefalt(8);
        bs9 = isItDefalt(9);
        bs10 = isItDefalt(10);
        bs11 = isItDefalt(11);
        bs12 = isItDefalt(12);
        bs13 = isItDefalt(13);
        bs14 = isItDefalt(14);
        bs15 = isItDefalt(15);

        //This assigns each button an listener. The on click listener is implemented in a separate
        //class for simplicity.
        b0.setOnClickListener(new SondPlay(bs0, lib));
        b1.setOnClickListener(new SondPlay(bs1, lib));
        b2.setOnClickListener(new SondPlay(bs2, lib));
        b3.setOnClickListener(new SondPlay(bs3, lib));
        b4.setOnClickListener(new SondPlay(bs4, lib));
        b5.setOnClickListener(new SondPlay(bs5, lib));
        b6.setOnClickListener(new SondPlay(bs6, lib));
        b7.setOnClickListener(new SondPlay(bs7, lib));
        b8.setOnClickListener(new SondPlay(bs8, lib));
        b9.setOnClickListener(new SondPlay(bs9, lib));
        b10.setOnClickListener(new SondPlay(bs10, lib));
        b11.setOnClickListener(new SondPlay(bs11, lib));
        b12.setOnClickListener(new SondPlay(bs12, lib));
        b13.setOnClickListener(new SondPlay(bs13, lib));
        b14.setOnClickListener(new SondPlay(bs14, lib));
        b15.setOnClickListener(new SondPlay(bs15, lib));

    }

    // This checks to see if the sound in question has been given a custom value.
    private int isItDefalt(int num) {
        Bundle bundle = getIntent().getExtras();// retrieves proto database with sound paths and corresponding
        //checks to see if there is currently an assigned file path for the audio.
        if ((getIntent().getExtras() != null) && (bundle.getString("Id" + num) != null) && (!bundle.getString("Id" + num).equals(""))) {
            String path = bundle.getString("Id" + num);// gets path from bundle object
            return temp = lib.load(path, 1);// loads sound with corresponding path id.
        } else {
            //loads the default for corresponding button
            switch (num) {
                case 0: {
                    return bs0 = lib.load(this, r0, 1);
                }
                case 1: {
                    return bs1 = lib.load(this, r1, 1);
                }
                case 2: {
                    return bs2 = lib.load(this, r2, 1);

                }
                case 3: {
                    return bs3 = lib.load(this, r3, 1);

                }
                case 4: {
                    return bs4 = lib.load(this, r4, 1);

                }
                case 5: {
                    return bs5 = lib.load(this, r5, 1);

                }
                case 6: {
                    return bs6 = lib.load(this, r6, 1);

                }
                case 7: {
                    return bs7 = lib.load(this, r7, 1);

                }
                case 8: {
                    return bs8 = lib.load(this, r8, 1);

                }
                case 9: {
                    return bs9 = lib.load(this, r9, 1);

                }
                case 10: {
                    return bs10 = lib.load(this, r10, 1);

                }
                case 11: {
                    return bs11 = lib.load(this, r11, 1);

                }
                case 12: {
                    return bs12 = lib.load(this, r12, 1);

                }
                case 13: {
                    return bs13 = lib.load(this, r13, 1);

                }
                case 14: {
                    return bs14 = lib.load(this, r14, 1);

                }
                case 15: {
                    return bs15 = lib.load(this, r15, 1);

                }
                default: {
                    return bs0 = lib.load(this, r0, 1);

                }
            }
        }
    }

    // This implements the event listener for the sound playing
    class SondPlay implements View.OnClickListener {
        private int sound;// this holds a button id.
        private SoundPool p;// this creates a sound object to be used by the play function.

        SondPlay(int a, SoundPool pa) {
            super();
            sound = a;
            p = pa;
        }

        // runs the soundPlay
        @Override
        public void onClick(View v) {
            soundPlayAction(sound, p);
        }

    }

    // This plays the sound with only the nessisary arguments
    private void soundPlayAction(int a, SoundPool pa) {
        pa.play(a, 1, 1, 0, 0, 1);// the play method takes more arguments than needed so this method autofills it for simpler implementation.
    }

    // This switches to the help activity
    public void changeHelp(View view) {
        Intent startNewActivity = new Intent(this, helpScreenActivity.class);// this creates a call for a new page (help in this case).
        keepSounds(startNewActivity);// this updates the sounds.
        startActivity(startNewActivity);// this switches pages.
    }

    // This function allows the user to add the path of a custom sound to the information passed to the next page
    // This is done to keep data between different activities. The putExtra command only accepts primitive args so this method allows easier implementation.
    private void updateSound(Intent i, int num) {
        if (getIntent().getExtras() != null) {// this checks to make sure that there is our proto-data Structure in the page's intent
            Bundle bundle = getIntent().getExtras();//This gets a bundle object with all of our paths and keys
            if (bundle.getString("Id" + num) == null || bundle.getString("Id" + num).equals("")) {// this checks to make sure each key has a valid path
                i.putExtra("Id" + num, "");//This adds to the database if the specific key is missing
            } else {
                i.putExtra("Id" + num, bundle.getString("Id" + num));// this puts the current string in the next page's intent
            }
        } else {
            i.putExtra("Id" + num, "");// This creates a value for the number if none exists. It also will create the database.
        }
    }

    // This function updates all 16 sounds individually. It is not done in a loop to allow the developers to turn off specific sound when bug checking.
    private void keepSounds(Intent startNewActivity) {
        // This calls the update function for each button.
        updateSound(startNewActivity, 0);
        updateSound(startNewActivity, 1);
        updateSound(startNewActivity, 2);
        updateSound(startNewActivity, 3);
        updateSound(startNewActivity, 4);
        updateSound(startNewActivity, 5);
        updateSound(startNewActivity, 6);
        updateSound(startNewActivity, 7);
        updateSound(startNewActivity, 8);
        updateSound(startNewActivity, 9);
        updateSound(startNewActivity, 10);
        updateSound(startNewActivity, 11);
        updateSound(startNewActivity, 12);
        updateSound(startNewActivity, 13);
        updateSound(startNewActivity, 14);
        updateSound(startNewActivity, 15);
    }

    //This will change the screen to a sound change menu
    public void changeSound(View view) {
        Intent startNewActivity = new Intent(this, record.class);
        keepSounds(startNewActivity);
        startActivity(startNewActivity);
    }
}


